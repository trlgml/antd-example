{"version":3,"sources":["routes/index.js","services/index.js","saga/demo.js","services/api.js","saga/index.js","ducks/index.js","redux/index.js","App.js","serviceWorker.js","index.js","ducks/demo.js"],"names":["Demo","lazy","Kebiao","Paletee","Selfvideo","Selfaudio","Drag","Anim","Home","Editor","Copy","D3","NoMatch","routers","path","component","BasicRoute","fallback","map","item","index","key","exact","service","axios","create","baseURL","process","timeout","interceptors","request","use","config","error","Promise","reject","response","data","message","demoSaga","all","takeEvery","demoTypes","DEMO_ASYNC","select","store","console","log","call","services","get","result","put","demoActions","demoSetList","rootSaga","demo","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createHistory","require","createHashHistory","sagaMiddleware","createSagaMiddleware","onError","createStore","combineReducers","reducers","applyMiddleware","routerMiddleware","run","moment","locale","App","zh_CN","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","types","DEMO_SET_LIST","initialState","list","state","action","type","payload","actions","demoAsync"],"mappings":"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","file":"static/js/main.b800b180.chunk.js","sourcesContent":["import React, { lazy, Suspense } from \"react\";\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nconst Demo = lazy(() => import(/* webpackChunkName: \"Demo\" */ \"@/page/Demo\"));\nconst Kebiao = lazy(() => import(/* webpackChunkName: \"Demo\" */ \"@/page/Kebiao\"));\nconst Paletee = lazy(() => import(/* webpackChunkName: \"Demo\" */ \"@/page/Paletee\"));\nconst Selfvideo = lazy(() => import(/* webpackChunkName: \"Demo\" */ \"@/page/Selfvideo\"));\nconst Selfaudio = lazy(() => import(/* webpackChunkName: \"Demo\" */ \"@/page/Selfaudio\"));\nconst Drag = lazy(() => import(/* webpackChunkName: \"Drag\" */ \"@/page/Drag\"));\nconst Anim = lazy(() => import(/* webpackChunkName: \"Anim\" */ \"@/page/Anim\"));\nconst Home = lazy(() => import(/* webpackChunkName: \"Home\" */ \"@/page\"));\nconst Editor = lazy(() => import(/* webpackChunkName: \"Editor\" */ \"@/page/Editor\"));\nconst Copy = lazy(() => import(/* webpackChunkName: \"Im\" */ \"@/page/Copy\"));\nconst D3 = lazy(() => import(/* webpackChunkName: \"D3\" */ \"@/page/D3\"));\nconst NoMatch = lazy(() => import(/* webpackChunkName: \"404\" */ \"@/page/404\"));\nconst Northbound = lazy(() => import(/* webpackChunkName: \"Northbound\" */ \"@/page/Northbound\"));\n\nconst routers = [\n  { path: \"/\", component: Home },\n  { path: \"/Demo\", component: Demo },\n  { path: \"/Paletee\", component: Paletee },\n  { path: \"/Selfvideo\", component: Selfvideo },\n  { path: \"/Selfaudio\", component: Selfaudio },\n  { path: \"/D3\", component: D3 },\n  { path: \"/Kebiao\", component: Kebiao },\n  { path: \"/Anim\", component: Anim },\n  { path: \"/Editor\", component: Editor },\n  { path: \"/Copy\", component: Copy },\n  { path: \"/Drag\", component: Drag },\n  { path: \"/Northbound\", component: Northbound },\n  { path: \"/404\", component: NoMatch },\n]\n\nconst BasicRoute = () => (\n  <Router>\n    <Suspense fallback={<div> Loading </div>}>\n      <Switch>\n        {routers.map((item, index) => {\n          return (\n            <Route\n              key={index}\n              path={item.path}\n              exact\n              component={item.component}\n            // render={(props) =>\n            //   !item.auth ? (\n            //     <item.component {...props} />\n            //   ) : isLogin ? (\n            //     <item.component {...props} />\n            //   ) : (\n            //         <Redirect to=\"/login\" />\n            //       )\n            // }\n            />\n          );\n        })}\n        <Route component={NoMatch} />\n      </Switch>\n    </Suspense>\n  </Router>\n);\n\n\nexport default BasicRoute;\n","\nimport axios from 'axios'\nimport { message } from 'antd';\n\nconst service = axios.create({\n  baseURL: process.env.REACT_APP_AXIOS_BASE_URL,\n  timeout: 5000\n});\n\nservice.interceptors.request.use(\n  (config) => {\n    return config\n  }, (error) => {\n    return Promise.reject(error)\n  }\n);\n\nservice.interceptors.response.use(\n  (response) => {\n    return response.data\n  }, (error) => {\n    message.error('网络请求失败')\n    return Promise.reject(error)\n  }\n);\n\nexport default service;\n","import { takeEvery, all, call, put, select } from 'redux-saga/effects';\nimport { types as demoTypes, actions as demoActions } from '@/ducks/demo';\nimport { get } from '@/services/api';\n\nexport default function* demoSaga() {\n  yield all([\n    takeEvery(demoTypes.DEMO_ASYNC, function* (...a) {\n      //当前store\n      const store = yield select()\n      console.log(store);\n      //异步请求\n      const result = yield call(() => {\n        return get()\n      })\n      // 触发actions\n      yield put(demoActions.demoSetList(result))\n    }),\n  ]);\n}\n","import services from '@/services';\n\nexport const get = () => {\n  return services.get('/users')\n}","import { all } from 'redux-saga/effects';\n\nimport demoSaga from './demo';\n\nfunction* rootSaga() {\n  yield all([\n    demoSaga()\n  ]);\n}\n\nexport default rootSaga;","import demo from './demo'\n\nexport default {\n  demo,\n}","import { combineReducers, createStore, compose, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga'\nimport { routerMiddleware } from 'react-router-redux';\nimport rootSaga from '../saga'\nimport reducers from '@/ducks/index';\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst createHistory = require('history').createHashHistory();\n\nconst sagaMiddleware = createSagaMiddleware({\n  onError: (error) => {\n    console.error('@ Saga error: ', error);\n  }\n});\n\nlet store = createStore(\n  combineReducers(reducers),\n  composeEnhancers(applyMiddleware(sagaMiddleware, routerMiddleware(createHistory)))\n);\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport Route from \"./routes\";\nimport store from \"./redux\";\nimport { ConfigProvider } from \"antd\";\nimport zh_CN from 'antd/lib/locale-provider/zh_CN';\nimport moment from \"moment\";\nimport \"moment/locale/zh-cn\";\n\nmoment.locale(\"zh-cn\");\n\nconst App = () => (\n  <ConfigProvider locale={zh_CN}>\n    <Provider store={store}>\n      <Route></Route>\n    </Provider>\n  </ConfigProvider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const types = {\n  DEMO_SET_LIST: 'demo/set_list',\n  DEMO_ASYNC: 'demo/async',\n}\n\nexport const initialState = {\n  list: []\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case types.DEMO_SET_LIST:\n      return { ...state, list: action.payload.list }\n    default:\n      return state\n  }\n}\n\nexport const actions = {\n  demoSetList(list = []) {\n    return { type: types.DEMO_SET_LIST, payload: { list } }\n  },\n  demoAsync() {\n    return { type: types.DEMO_ASYNC }\n  }\n}"],"sourceRoot":""}